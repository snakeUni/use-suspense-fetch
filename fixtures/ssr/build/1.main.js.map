{"version":3,"file":"1.main.js","sources":["webpack:///./src/Comments.js","webpack:///./src/data.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { useData } from './data'\n\nexport default function Comments() {\n  const comments = useData()\n  return (\n    <>\n      {comments.map((comment, i) => (\n        <p className=\"comment\" key={i}>\n          {comment}\n        </p>\n      ))}\n    </>\n  )\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { createContext, useContext } from 'react'\n\n// Note: this file does not demonstrate a real data fetching strategy.\n// We only use this to simulate data fetching happening on the server\n// while the cache is populated on the client. In a real app, you would\n// instead use a data fetching library or Server Components for this.\n\nconst DataContext = createContext(null)\n\nexport function DataProvider({ children, data }) {\n  return <DataContext.Provider value={data}>{children}</DataContext.Provider>\n}\n\n// In a real implementation the data would be streamed with the HTML.\n// We haven't integrated this part yet, so we'll just use fake data.\nconst fakeData = [\n  \"Wait, it doesn't wait for React to load?\",\n  'How does this even work?',\n  'I like marshmallows'\n]\n\nexport function useData() {\n  const ctx = useContext(DataContext)\n  if (ctx !== null) {\n    // This context is only provided on the server.\n    // It is here to simulate a suspending data fetch.\n    ctx.read()\n  }\n  return fakeData\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AADA;AAQA;;;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAMA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;;A","sourceRoot":""}